Build a complete end-to-end full stack business operations management system using React.js with TailwindCSS and shadcn/ui for the frontend, Node.js with Express.js for the backend, and PostgreSQL (or SQLite for local testing) as the database. The system should have a single global navbar at the top, listing all departments (Admin, Inventory, Sales, Accounts, Logistics, and Employees), and when clicking on any department, the user should be redirected to that department’s dedicated dashboard. Each dashboard should contain its own pages and workflows with CRUD functionality (create, read, update, delete), reporting, and role-based navigation. The Admin dashboard should provide overall KPIs, approvals, and analytics; the Inventory dashboard should manage stock in/out, low stock alerts, reorder planning, spare parts tracking, and vendor communication; the Sales dashboard should handle quotations (create, edit, download as PDF, track statuses, convert to invoices) and invoices (Proforma, Tax, E-Way Bill) with client tracking and payment due alerts; the Accounts dashboard should track payments, financial reports, and Tally integration placeholders; the Logistics dashboard should allow manual shipment creation, route planning, consignment tracking, vendor coordination, delivery status updates, and proof of delivery uploads, without integrating with third-party logistics APIs; the Employee dashboard should include attendance (geo-tagging and timestamps), task assignment with statuses (new → in progress → completed), leave management, performance tracking, and live marketing employee location tracking on a map. The system should also include a Payments module for client/vendor transactions, a Reports & Analytics module for real-time dashboards, exports (Excel, PDF, CSV), and forecasting placeholders, as well as a System Administration module for user roles, API integration placeholders, backup, audit logs, and security monitoring. Attendance should be visible across all dashboards, tasks should include assignment and status flows, and notifications should appear for low stock, pending payments, and task deadlines. Include reusable UI components, modular code structure, sample data for testing, exportable reports, and deliver a responsive design with global search and optional dark mode. Do not add signup or login functionality for now; build everything as a local-only system for testing.